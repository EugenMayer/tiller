#!/usr/bin/env ruby
# A tool to create configuration files from a variety of sources, particularly 
# useful for Docker containers. See https://github.com/markround/tiller for 
# examples and documentation.
#
# Named from the first ship-building (Docker) related term I could find that
# didn't have an existing gem named after it!
#
# Mark Dastmalchi-Round <github@markround.com>

VERSION = '0.7.9'

require 'erb'
require 'ostruct'
require 'yaml'
require 'fileutils'
require 'optparse'
require 'pp'
require 'json'
require 'socket'
require 'tiller/api'
require 'tiller/defaults'
require 'tiller/loader'
require 'tiller/options'
require 'tiller/util'
require 'tiller/templatesource'
require 'tiller/datasource'
require 'tiller/logger'
require 'digest/md5'

EXIT_SUCCESS = 0

# And we're on our way...
module Tiller

  puts "tiller v#{VERSION} (https://github.com/markround/tiller) <github@markround.com>"

  config = parse_options(Tiller::Defaults)
  log = Tiller::Logger.new(config)

  log.debug("Executable: #{__FILE__}")


  # Add tiller_lib to the LOAD PATH so we can pull in user-defined plugins
  $LOAD_PATH.unshift(config[:tiller_lib]) unless $LOAD_PATH.include?(config[:tiller_lib])

  # Load the common YAML configuration file
  begin
    common_file = File.join(config[:tiller_base], 'common.yaml')
    config.merge!(YAML.load(open(common_file)))
  rescue StandardError => e
    abort "Error : Could not open common configuration file!\n#{e}"
  end

  # Check for keys only present in v2 format (everything in one common.yaml)
  if [ 'environments' , 'defaults'].any? { |k| config.has_key?(k) }
    log.info("Using common.yaml v2 format configuration file")
    config[:config_version] = 2
  else
    config[:config_version] = 1
  end

  # Set the environment if not already done through ENV or -e flag
  config[:environment] = config['default_environment'] if config[:environment].nil?

  log.info("Using configuration from #{config[:tiller_base]}")
  log.info("Using plugins from #{config[:tiller_lib]}/tiller")
  log.info("Using environment #{config[:environment]}")

  # Now load all our plugins
  data_classes      = loader(DataSource, config['data_sources'])
  template_classes  = loader(TemplateSource, config['template_sources'])

  log.info('Template sources loaded ' + template_classes.to_s)
  log.info('Data sources loaded ' + data_classes.to_s)

  # Now go through all our data sources and start to assemble our global_values
  # hash. As hashes are getting merged, new values will take precedence over
  # older ones, and a warning will be displayed.
  # We also add in 'environment' to start with as it's very useful for all
  # templates.
  global_values = { 'environment' => config[:environment] }
  data_classes.each do |data_class|
    # Now need to see if any of the common.yaml values have been over-ridden by a datasource
    # e.g. environment-specific execs and so on. We do this first so that connection strings
    # to datasources (e.g. zookeeper) can be included in the config before we obtain any
    # values.
    config.merge!(data_class.new(config).common) do |key, old, new|
      warn_merge(key, old, new, 'common', data_class.to_s)
    end

    global_values.merge!(data_class.new(config).global_values) do |key, old, new|
      warn_merge(key, old, new, 'global', data_class.to_s)
    end
  end

  # Get all Templates for the given environment
  templates = {}
  template_classes.each do |template_class|
    ts = template_class.new(config)
    ts.templates.each do |t|
      templates[t] = ts.template(t)
    end
  end

  log.info("Available templates : #{templates.keys}")

  # Now we go through each template we've identified, and get the
  # values for each one.
  all_templates       = {}
  skipped_templates   = 0
  updated_templates   = 0

  templates.each do |template, content|

    # Start with a hash of our global values
    tiller = Hash.new.merge(global_values)
    target_values = {}

    # Now we add to the 'tiller' hash with values from each DataSource, warning if we
    # get duplicate values.
    data_classes.each do |data_class|
      dc = data_class.new(config)
      if dc.values(template) != nil
        tiller.merge!(dc.values(template)) do |key, old, new|
          warn_merge(key, old, new, 'data', data_class.to_s)
        end
      end

      # Now get target_values (where the file should be installed to,
      # permissions and so on)
      target_values.merge!(dc.target_values(template)) do |key, old, new|
        warn_merge(key, old, new, 'target', data_class.to_s)
      end
    end

    # If our data source returned no values (e.g. we don't build this template
    # for this environment), we move onto the next one.
    next if target_values.empty?

    # Now, we build the template
    log.info("Building template #{template}")

    # Use an OpenStruct namespace, as it's way easier than faffing around with
    # manual binding, and also non-existing values just get replaced by <nil>
    # instead of failing on errors.
    ns = OpenStruct.new(tiller)
    parsed_template = ERB.new(content, nil, '-').result(ns.instance_eval { binding })

    # Write the template, and also create the directory path if it
    # doesn't exist.
    target_path = File.dirname(target_values['target'])
    FileUtils.mkdir_p(target_path) unless File.directory?(target_path)

    filename = target_values['target']

    # MD5 checksum of templates
    if config['md5sum'] && File.exists?(filename)
      template_md5 = Digest::MD5.hexdigest(parsed_template)
      log.debug("MD5 of #{template} is #{template_md5}")
      file_md5 = Digest::MD5.hexdigest(File.read(filename))
      log.debug("MD5 of #{filename} is #{file_md5}")
      if template_md5 == file_md5
        log.info("Content unchanged for #{template}, not writing anything")
        skipped_templates += 1
        next
      end
    end

    target = open(target_values['target'], 'w')
    target.puts(parsed_template)
    target.close

    updated_templates += 1

    # config is redundant in target_values, remove it for the final status hash.
    all_templates[template] = {
        'merged_values' => tiller,
        'target_values' => target_values.reject{|k,_v| k=='config'}
    }

    # Set permissions if we are running as root
    if Process::Sys.geteuid == 0
      log.info("Setting ownership/permissions on #{target_values['target']}")
      if target_values.key?('perms')
        FileUtils.chmod(target_values['perms'], target_values['target'])
      end
      # Don't need to check for the presence of these, as they're ignored
      # if they are null.
      FileUtils.chown(target_values['user'], target_values['group'],
                      target_values['target'])
    else
      log.info('Not running as root, so not setting ownership/permissions on ' \
        "#{target_values['target']}")
    end

  end

  if config['md5sum']
    log.info("[#{updated_templates}/#{templates.size}] templates written, [#{skipped_templates}] skipped with no change")
  end

  puts 'Template generation completed'

  # Final status structure for API
  tiller_api_hash = {'config' => config, 'global_values' => global_values, 'templates' => all_templates}

  if config['api_enable']
    Thread.start{ tiller_api(tiller_api_hash) }
  end

  # Override the exec if run with -x (see options.rb)
  if config.has_key?(:alt_exec)
    log.info("Overriding exec parameter [#{config['exec']}] with [#{config[:alt_exec]}]")
    config['exec'] = config[:alt_exec]
  end

  # If no templates were generated and md5sum_noexec is enabled, stop here.
  if config['md5sum'] && config['md5sum_noexec'] && skipped_templates == templates.size
    log.info("No templates written, stopping without exec")
    exit EXIT_SUCCESS
  end

  if config[:no_exec] == false && config.key?('exec')
    # All templates created, so let's start the replacement process
    puts "Executing #{config['exec']}..."

    # Spawn and wait so API can continue to run
    child_pid = launch(config['exec'], :verbose => config[:verbose])

    log.info("Child process forked with PID #{child_pid}.")

    # Catch signals and send them on to the child process
    [ :INT, :TERM, :HUP ].each do |sig|
      Signal.trap(sig) { signal(sig, child_pid, :verbose => config[:verbose]) }
    end

    Process.wait(child_pid)

    # Capture the child process status, so we can also exit with this code
    exit_status = $?.exitstatus

    log.info("Child process exited with status #{exit_status}")
    log.info('Child process finished, Tiller is stopping.')
    exit exit_status

  end

end
